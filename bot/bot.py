import json
import telebot

from decouple import config

from utils import (
    is_user_allowed,
    is_imei_valid,
)

from reqs import (
    create_user,
    current_user,
    get_service_list,
    create_imei_check,
)


TELEGRAM_BOT_TOKEN = config('TELEGRAM_BOT_TOKEN', cast=str)
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)


def access_required(handler):
    def wrapper(message: telebot.types.Message, *args, **kwargs):
        if not is_user_allowed(message.from_user.id):
            bot.send_message(
                chat_id=message.chat.id,
                text='–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —ç—Ç–æ–≥–æ –±–æ—Ç–∞.'
            )
            return
        return handler(message, *args, **kwargs)
    return wrapper


@bot.message_handler(commands=['start'])
@access_required
def send_welcome(message: telebot.types.Message) -> None:
    user = current_user(uid=message.from_user.id)

    if 'error' not in user:
        bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å.\n\n"
            "‚úÖ –¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ IMEI, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è. üîç"
        )
    else:
        user = create_user(uid=message.from_user.id)

        bot.send_message(
            message.chat.id,
            "üöÄ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ß–µ–∫–µ—Ä</b> ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI.\n\n"
            "‚úÖ –¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
            parse_mode="HTML"
        )

        bot.send_message(
            message.chat.id,
            "üîπ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>IMEI</b>, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è. \n"
            "üìå –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <code>/help</code>.",
            parse_mode="HTML"
        )


@bot.message_handler(commands=['services'])
@access_required
def send_service_list(message: telebot.types.Message) -> None:  
    response = get_service_list(
        uid=message.from_user.id
    )

    if 'error' in response:
        bot.send_message(
            message.chat.id,
            f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: \n{response['error']}\n{response['details']}'
        )
        return

    answer = ''
    for service in response:
        answer += f'*üõ†Ô∏è ID:* `{service['id']}`\n'
        answer += f'*üìå Title:* `{service['title']}`\n'
        answer += f'*üí∞ Price:* `{service['price']}`\n'
        answer += '-------------------------\n'

    bot.send_message(
        message.chat.id,
        f'*–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:*\n\n{answer}', parse_mode='Markdown'
    )


@bot.message_handler(commands=['help'])
@access_required
def send_help(message: telebot.types.Message) -> None:
    help_text = (
        "ü§ñ <b>–ß–µ–∫–µ—Ä - –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI</b>\n\n"
        "üìå <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "‚Äî –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ IMEI, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º. üîç\n"
        "‚Äî –ï—Å–ª–∏ IMEI –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, —è —Å–æ–æ–±—â—É –æ–± —ç—Ç–æ–º. ‚ùå\n\n"
        "üõ† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üîπ <code>/start</code> ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üîπ <code>/help</code> ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "üîπ <code>/services</code> ‚Äî –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)\n\n"
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üì©"
    )

    bot.send_message(message.chat.id, help_text, parse_mode="HTML")


@bot.message_handler()
@access_required
def send_info_by_imei(message: telebot.types.Message) -> None:
    imei = message.text.strip()
    
    if not is_imei_valid(imei):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        return

    response = create_imei_check(imei=imei, uid=message.from_user.id)

    if 'error' in response:
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:\n<b>{response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</b>\n"
            f"{response.get('details', '')}",
            parse_mode="HTML"
        )
        return

    service_title = response.get("service", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
    status = response.get("status", "unknown")
    properties = response.get("properties", {})

    status_emoji = {
        "successful": "‚úÖ",
        "unsuccessful": "‚ùå",
        "failed": "‚ö†Ô∏è"
    }.get(status, "‚ùî")

    text = (
        f"<b>üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IMEI {imei}:</b>\n\n"
        f"üîπ <b>–°–µ—Ä–≤–∏—Å:</b> {service_title}\n"
        f"üîπ <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status.capitalize()}\n"
    )

    if properties:
        text += "\n<b>üìç –î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>\n"
        for key, value in properties.items():
            formatted_key = key.replace("_", " ").title()
            text += f"üî∏ <b>{formatted_key}:</b> {value}\n"

    bot.send_message(
        message.chat.id,
        text,
        parse_mode="HTML"
    )


def run() -> None:
    bot.infinity_polling()

run()